<?php

use Drupal\recently_read\Entity\RecentlyReadType;
use Drupal\recently_read\Entity\RecentlyRead;


/**
 * Implements hook_theme().
 */
function recently_read_theme() {
  $theme = [];
  $theme['recently_read'] = [
    'render element' => 'elements',
    'file' => 'recently_read.page.inc',
    'template' => 'recently_read',
  ];
  $theme['recently_read_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'recently_read.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function recently_read_theme_suggestions_recently_read(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#recently_read'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'recently_read__' . $sanitized_view_mode;
  $suggestions[] = 'recently_read__' . $entity->bundle();
  $suggestions[] = 'recently_read__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'recently_read__' . $entity->id();
  $suggestions[] = 'recently_read__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_view().
 */
function recently_read_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  $renderer = \Drupal::service('renderer');
  $renderer->addCacheableDependency($build, $entity->id());
  $entityType = $entity->getEntityType();
  $typeManager = \Drupal::entityTypeManager();

  if($entityType->id() === 'node' && $view_mode === 'full') {
    $readTypeConfig = RecentlyReadType::load('node');
    $allowedTypes = $readTypeConfig->getTypes();

    if(in_array($entity->bundle(), $allowedTypes)) {
      // Check existing
      $exists = $typeManager->getStorage('recently_read')->loadByProperties([
        'user_id' => \Drupal::currentUser()->id(),
        'entity_id' => $entity->id(),
      ]);

      // If exists then update created else create new.
      if(!empty($exists)) {
        foreach ($exists as $entry) {
          $entry->setCreatedTime(time())->save();
        }
      }
      else {
        // Create new
        $recentlyRead = RecentlyRead::create([
          'type' => 'node',
          'user_id' => \Drupal::currentUser()->id(),
          'entity_id' => $entity->id(),
          'session_id' => 0,
          'created' => time(),
        ]);
        $recentlyRead->save();
      }

    }

  }

}