<?php

use Drupal\recently_read\Entity\RecentlyReadType;
use Drupal\recently_read\Entity\RecentlyRead;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_entity_view().
 */
function recently_read_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Disable cache.
  $renderer = \Drupal::service('renderer');
  $renderer->addCacheableDependency($build, $entity->id());
  if ($view_mode === 'full') {
    // Load recently read config if exists and if its enabled for this entity.
    $readTypeConfig = RecentlyReadType::load($entity->getEntityTypeId());
    if ($readTypeConfig && $readTypeConfig->get('enabled')) {
      // Get allowed types for nodes/taxonomy.
      $allowedTypes = $readTypeConfig->getTypes();
      if ($allowedTypes && in_array($entity->bundle(), $allowedTypes)) {
        insert_entity($entity);
      }
      else {
        insert_entity($entity);
      }
    }
  }
}

/**
 * Custom function to insert aa new entry for recently read entity.
 */
function insert_entity($entity) {
  // SESSSION CODE
//  if (\Drupal::currentUser()->isAnonymous()) {
//    if (!isset($_COOKIE['user_session'])) {
//      $cookie_name = "user_session";
//      $cookie_value = session_id();
//      setcookie($cookie_name, $cookie_value, time() + (86400 * 3), "/");
//    }
//    else {
//      $session = $_COOKIE['user_session'];
//    }
//    $user_id = 0;
//    $exists = $entityTypeManager->getStorage('recently_read')->loadByProperties([
//      'session_id' => $session,
//      'type' => $entity->getEntityTypeId(),
//      'entity_id' => $entity->id(),
//    ]);
//  }
//  else {
//    // Check if entry already exists.
//    $exists = $entityTypeManager->getStorage('recently_read')->loadByProperties([
//      'user_id' => \Drupal::currentUser()->id(),
//      'type' => $entity->getEntityTypeId(),
//      'entity_id' => $entity->id(),
//    ]);
//  }
  // If anonymous set user_id to 0.
  $user_id = \Drupal::currentUser()->id();
  if (\Drupal::currentUser()->isAnonymous()) {
    $user_id = 0;
  }
  $entityTypeManager = \Drupal::entityTypeManager();
  $session = NULL;
  $exists = $entityTypeManager->getStorage('recently_read')->loadByProperties([
    'user_id' => $user_id,
    'type' => $entity->getEntityTypeId(),
    'entity_id' => $entity->id(),
  ]);
  // If exists then update created else create new.
  if (!empty($exists)) {
    foreach ($exists as $entry) {
      $entry->setCreatedTime(time())->save();
    }
  }
  else {
    // Create new.

    $recentlyRead = RecentlyRead::create([
      'type' => $entity->getEntityTypeId(),
      'user_id' => $user_id,
      'entity_id' => $entity->id(),
      'session_id' => $user_id ? 0 : session_id(),
      'created' => time(),
    ]);
    $recentlyRead->save();
  }
}

/**
 * Implements hook_hook().
 */
function recently_read_cron() {
  // Query to get all recently_read entries older then two weeks.
  $query = \Drupal::entityQuery('recently_read')->condition('created', strtotime('-2 week'), '<=');
  $recently_read_ids = $query->execute();
  foreach ($recently_read_ids as $rid) {
    // Delete data.
    $recently_read = RecentlyRead::load($rid);
    $recently_read->delete();
  }
}